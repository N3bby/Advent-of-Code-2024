BST: 63687530 (A) % 8 --> B
BXL: 2 (B) xor 3 (literal) --> B
CDV: 63687530 (A) / 2 ^ 1 (B) --> C
ADV: 63687530 (A) / 2 ^ 3 (literal) --> A
BXL: 1 (B) xor 5 (literal) --> B
BXC: 4 (B) xor 31843765 (C) --> B
OUT: 31843761 (B) % 8 --> OUTPUT
JNZ: if (7960941 (A)) { jumpTo(0 (literal)) }

BST: 7960941 (A) % 8 --> B
BXL: 5 (B) xor 3 (literal) --> B
CDV: 7960941 (A) / 2 ^ 6 (B) --> C
ADV: 7960941 (A) / 2 ^ 3 (literal) --> A
BXL: 6 (B) xor 5 (literal) --> B
BXC: 3 (B) xor 124389 (C) --> B
OUT: 124390 (B) % 8 --> OUTPUT
JNZ: if (995117 (A)) { jumpTo(0 (literal)) }

BST: 995117 (A) % 8 --> B
BXL: 5 (B) xor 3 (literal) --> B
CDV: 995117 (A) / 2 ^ 6 (B) --> C
ADV: 995117 (A) / 2 ^ 3 (literal) --> A
BXL: 6 (B) xor 5 (literal) --> B
BXC: 3 (B) xor 15548 (C) --> B
OUT: 15551 (B) % 8 --> OUTPUT
JNZ: if (124389 (A)) { jumpTo(0 (literal)) }

BST: 124389 (A) % 8 --> B
BXL: 5 (B) xor 3 (literal) --> B
CDV: 124389 (A) / 2 ^ 6 (B) --> C
ADV: 124389 (A) / 2 ^ 3 (literal) --> A
BXL: 6 (B) xor 5 (literal) --> B
BXC: 3 (B) xor 1943 (C) --> B
OUT: 1940 (B) % 8 --> OUTPUT
JNZ: if (15548 (A)) { jumpTo(0 (literal)) }

BST: 15548 (A) % 8 --> B
BXL: 4 (B) xor 3 (literal) --> B
CDV: 15548 (A) / 2 ^ 7 (B) --> C
ADV: 15548 (A) / 2 ^ 3 (literal) --> A
BXL: 7 (B) xor 5 (literal) --> B
BXC: 2 (B) xor 121 (C) --> B
OUT: 123 (B) % 8 --> OUTPUT
JNZ: if (1943 (A)) { jumpTo(0 (literal)) }

BST: 1943 (A) % 8 --> B
BXL: 7 (B) xor 3 (literal) --> B
CDV: 1943 (A) / 2 ^ 4 (B) --> C
ADV: 1943 (A) / 2 ^ 3 (literal) --> A
BXL: 4 (B) xor 5 (literal) --> B
BXC: 1 (B) xor 121 (C) --> B
OUT: 120 (B) % 8 --> OUTPUT
JNZ: if (242 (A)) { jumpTo(0 (literal)) }

BST: 242 (A) % 8 --> B
BXL: 2 (B) xor 3 (literal) --> B
CDV: 242 (A) / 2 ^ 1 (B) --> C
ADV: 242 (A) / 2 ^ 3 (literal) --> A
BXL: 1 (B) xor 5 (literal) --> B
BXC: 4 (B) xor 121 (C) --> B
OUT: 125 (B) % 8 --> OUTPUT
JNZ: if (30 (A)) { jumpTo(0 (literal)) }

BST: 30 (A) % 8 --> B
BXL: 6 (B) xor 3 (literal) --> B
CDV: 30 (A) / 2 ^ 5 (B) --> C
ADV: 30 (A) / 2 ^ 3 (literal) --> A
BXL: 5 (B) xor 5 (literal) --> B
BXC: 0 (B) xor 0 (C) --> B
OUT: 0 (B) % 8 --> OUTPUT
JNZ: if (3 (A)) { jumpTo(0 (literal)) }

BST: 3 (A) % 8 --> B
BXL: 3 (B) xor 3 (literal) --> B
CDV: 3 (A) / 2 ^ 0 (B) --> C
ADV: 3 (A) / 2 ^ 3 (literal) --> A
BXL: 0 (B) xor 5 (literal) --> B
BXC: 5 (B) xor 3 (C) --> B
OUT: 6 (B) % 8 --> OUTPUT
JNZ: if (0 (A)) { jumpTo(0 (literal)) }

pseudocode:

// --------------------

var a = ?
var b = ?
var c = ?

b = a % 8       // b = 0-7
b = b xor 3     // ...
c = a / 2 ^ b   // c = a / (2..128)
                // Value of A always gets shifted right 3 bits down! (-> /8)
a = a / 2 ^ 3   // We can actually execute this instruction last since it's not used anymore after this!
b = b xor 5     // 0-7 xor 5
b = b xor c     // ...
print(b % 8)
jumpIf (a != 0)

// --------------------

// B and C get recalculated each iteration based on value of A
// So we don't really have to care about state that gets carried through to the next loop
//
// This means each 3 bit chunk of A encodes a value that leads to the correct output for that iteration
// It is possible that multiple values may produce the same output
//
// So, for each iteration, we shift up A by 3 bits and test all 8 new values in the lowest 3 bits
// For each possible output, we do the same, recursively?
//
// Should take at best 128 (8 * 16 -- O(n)) iterations if only one value produces the correct result per 3 bit chunk

2,4,1,3,7,5,0,3,1,5,4,1,5,5,3,0
